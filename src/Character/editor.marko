class {
  onCreate(input) {
    this.state = {
      errors: [],
    }
    console.log('editor input', input)
    this.subscribeTo(input.link).on('refresh', () => {
      this.forceUpdate()
    })
    this.subscribeTo(input.link).on('destroy', () => {
      this.destroy({removeNode: false, recursive: false})
    })
    this.subscribeTo(input.link).on('errors', errors => {
      this.state.errors = errors
    })
  }
}

style {
  .HordEditor {
  }
  .HordEditor__Entry {
  }
}

macro|{ renderBody, field }| name='ErrorableMacro'
  span.errorable class=state.errors[field]?'-error':''
    <${renderBody}/>
    if(state.errors[field])
      span.errorable__error -- ${state.errors[field]}

macro|{ type, field, title, list }| name='InputMacro'
  $ let convertEvent = e => {
    if (type === 'number') return Number(e.target.value)
    if (type === 'checkbox') return e.target.checked
    return e.target.value
  }
  label.HordEditor__Entry
    span.HordEditor__Entry__name -- ${title}
      ErrorableMacro field=field
        if(type==='dropdown')
          select on-change('changeType')
            if(!list||list.length===0)
              option -- missing list
            else
              for|item| of=list
                $ let title = typeof item==='string'?item:item.title
                $ let option = typeof item==='string'?item:item.option
                option selected=input.dot[field]===option value=option -- ${title}
        else
          input.HordEditor__Entry__input type=type value=input.dot[field] on-change(e=>input.dot[field]=convertEvent(e))

section.HordEditor__General
  if(input.dot['name'])
    InputMacro field='name' type='number'
  span -- ${JSON.stringify(input.file.state)}