import {
  AttackSchema,
  DefenseSchema,
} from '../../schemata/specimen'

import {
  SpecialSchema,
} from '../../../schemata/common'

import {
  calculateCV,
} from '../../../util/calc'

class {
  addAttack() {
    this.input.file.queue()
    try {
      let d = `${this.input.field}.attacks`
      if (!this.input.dot[d]) {
        this.input.dot[d] = []
      }
      this.input.dot[d].push(AttackSchema.create())
    } catch(err) {
      console.error(err)
    }
    this.input.file.unqueue()
  }
  deleteAttack(index) {
    let d = `${this.input.field}.attacks`
    this.input.dot[d] = this.input.dot[d].filter((_,i)=>i!==index)
  }
  addDefense() {
    this.input.file.queue()
    try {
      let d = `${this.input.field}.defenses`
      if (!this.input.dot[d]) {
        this.input.dot[d] = []
      }
      this.input.dot[d].push(DefenseSchema.create())
    } catch(err) {
      console.error(err)
    }
    this.input.file.unqueue()
  }
  deleteDefense(index) {
    let d = `${this.input.field}.defenses`
    this.input.dot[d] = this.input.dot[d].filter((_,i)=>i!==index)
  }
  addSpecial() {
    this.input.file.queue()
    try {
      let d = `${this.input.field}.specials`
      if (!this.input.dot[d]) {
        this.input.dot[d] = []
      }
      this.input.dot[d].push(SpecialSchema.create())
    } catch(err) {
      console.error(err)
    }
    this.input.file.unqueue()

  }
  deleteSpecial(index) {
    let d = `${this.input.field}.specials`
    this.input.dot[d] = this.input.dot[d].filter((_,i)=>i!==index)
  }
}

style {
  .HordEditor__Hordes__SpecimenTitle__CombatValue {
    margin-left: 1em;
    opacity: 0.75;
    font-size: 70%;
  }
}

details
  summary
    span.HordEditor__Hordes__SpecimenTitle -- ${input.dot[`${input.field}.name`]}
    span.HordEditor__Hordes__SpecimenTitle__CombatValue -- ${calculateCV(input.dot[input.field])} CV
  div.HordEditor__Hordes__Specimen
    DotInput errors=input.errors dot=input.dot field=`${input.field}.name` title='name' tooltip='Name of the specimen'
    DotInput errors=input.errors dot=input.dot placeholder=calculateCV(input.dot[input.field]) field=`${input.field}.combatvalue` type='number' title='combat value' tooltip='Combat value of the specimen'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.description` type='textarea' title='description' tooltip='Description of the specimen'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.health` type='number' title='health tokens' tooltip='Specimen health tokens.'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.move` type='number' title='move tokens' tooltip='Specimen move tokens.'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.attack` type='number' title='attack tokens' tooltip='Specimen attack tokens.'
    fieldset
      legend -- attacks
        button on-click('addAttack') -- ＋
      if(input.dot[`${input.field}.attacks`])
        for|attack,attackIndex| of=input.dot[`${input.field}.attacks`]
          Attack on-delete('deleteAttack', attackIndex) errors=input.errors file=input.file dot=input.dot field=`${input.field}.attacks.${attackIndex}`
    fieldset
      legend -- defenses
        button on-click('addDefense') -- ＋
      if(input.dot[`${input.field}.defenses`])
        for|defense,defenseIndex| of=input.dot[`${input.field}.defenses`]
          Defense on-delete('deleteDefense', defenseIndex) errors=input.errors file=input.file dot=input.dot field=`${input.field}.defenses.${defenseIndex}`
    fieldset
      legend -- specials
        button on-click('addSpecial') -- +
      if(input.dot[`${input.field}.specials`])
        for|special,specialIndex| of=input.dot[`${input.field}.specials`]
          Special on-delete('deleteSpecial', specialIndex) errors=input.errors file=input.file dot=input.dot field=`${input.field}.specials.${specialIndex}`
