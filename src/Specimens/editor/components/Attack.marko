import { DefenseTypes } from '../../../util/common'
import { PropertySchema } from '../../../schemata/common'

class {
  addProperty() {
    let d = `${this.input.field}.properties`
    this.input.file.queue()
    try {
      let d = `${this.input.field}.properties`
        if (!this.input.dot[d]) {
          this.input.dot[d] = []
        }
        this.input.dot[d].push(PropertySchema.create())
    } catch(err) {
      console.error(err)
    }
    this.input.file.unqueue()
  }
  deleteProperty(index) {
    this.input.file.queue()
    let d = `${this.input.field}.properties`
    this.input.dot[d] = this.input.dot[d].filter((_,i)=>i!==index)
    if (this.input.dot[d].length === 0) {
      delete this.input.dot[d]
    }
    this.input.file.unqueue()
  }
}

details on-toggle(e=>input.config[`toggles.${input.field}`]=e.target.open) open=!input.config[`toggles.${input.field}`]
  summary.HordEditor__AttackTitle
    span.HordEditor__AttackTitle__Name -- ${input.dot[`${input.field}.name`]}
      span.HordEditor__AttackTitle__SubTitles
        span.HordEditor__Hordes__SpecimenTitle__Attack -- A ${input.dot[input.field+'.attack']}
        span.HordEditor__Hordes__SpecimenTitle__Damage -- D ${input.dot[input.field+'.damage']}
        if(input.dot[input.field+'.opportunistic'])
          span.HordEditor__Hordes__SpecimenTitle__Opportunistic -- O
        if(input.dot[input.field+'.range'])
          span.HordEditor__Hordes__SpecimenTitle__Range -- R ${input.dot[input.field+'.range']}
        if(input.dot[input.field+'.radius'])
          span.HordEditor__Hordes__SpecimenTitle__Radius -- r ${input.dot[input.field+'.radius']}
    button on-click(()=>component.emit('delete')) -- ❌
  div.HordeEditor__Attack
    DotInput errors=input.errors dot=input.dot field=`${input.field}.name` title='name' tooltip='Attack name.'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.attacktype` type='dropdown' list=['melee', 'ranged', 'launched', 'combo', 'other'] title='attack type' tooltip='Attack type.'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.attack` title='attack' type='number' tooltip='Attack tokens.'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.damage` title='damage' type='number' tooltip='Damage value.'
    DotInput errors=input.errors dot=input.dot field=`${input.field}.opportunistic` title='opportunistic' type='checkbox' tooltip='If the attack can be made opportunistically.'
    div -- TODO: damage type(s)
    DamageTypes errors=input.errors dot=input.dot field=`${input.field}.damagetype` file=input.file
    DotInput errors=input.errors dot=input.dot field=`${input.field}.range` title='range' type='number' tooltip='Attack range.'
    if(input.dot[`${input.field}.attacktype`] !== 'melee')
      DotInput errors=input.errors dot=input.dot field=`${input.field}.radius` title='radius' type='number' tooltip='Attack radius.'
    fieldset
      legend -- properties
        button on-click('addProperty') -- ＋
      if(input.dot[`${input.field}.properties`])
        for|property,propertyIndex| of=input.dot[`${input.field}.properties`]
          Property on-delete('deleteProperty', propertyIndex) errors=input.errors file=input.file dot=input.dot field=`${input.field}.properties.${propertyIndex}` config=input.config

style {
  .HordEditor__AttackTitle {
    display: inline-grid;
    width: 100%;
    grid-template-columns: auto minmax(0, 1fr) auto;
    align-items: center;
  }
  .HordEditor__AttackTitle__SubTitles > * {
    margin-left: 1em;
    opacity: 0.75;
    font-size: 70%;
  }
}