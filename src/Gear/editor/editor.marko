import {
  GearArmorSchema,
  GearConsumableSchema,
  GearMiscSchema,
  GearWealthSchema,
  GearWeaponSchema,
} from '../schemata/gear'

class {
  onCreate(input) {
    this.state = {
      errors: [],
      currentType: 'misc',
    }
    this.subscribeTo(input.link).on('refresh', () => {
      this.forceUpdate()
    })
    this.subscribeTo(input.link).on('destroy', () => {
      this.destroy({removeNode: false, recursive: false})
    })
    this.subscribeTo(input.link).on('errors', errors => {
      this.state.errors = errors
    })
  }
  changeType(dot, e) {
    switch(e.target.value) {
      case 'weapon':
        this.input.dot[dot] = GearWeaponSchema.conform({...this.input.dot[dot], type: 'weapon'})
        break
      case 'armor':
        this.input.dot[dot] = GearArmorSchema.conform({...this.input.dot[dot], type: 'armor'})
        break
      case 'consumable':
        this.input.dot[dot] = GearConsumableSchema.conform({...this.input.dot[dot], type: 'consumable'})
        break
      case 'wealth':
        this.input.dot[dot] = GearWealthSchema.conform({...this.input.dot[dot], type: 'wealth'})
        break
      case 'misc':
        this.input.dot[dot] = GearMiscSchema.conform({...this.input.dot[dot], type: 'misc'})
        break
      default:
      return
    }
    this.forceUpdate()
  }
  createGear(type) {
    switch(type) {
      case 'weapon':
        return GearWeaponSchema.create()
      case 'armor':
        return GearArmorSchema.create()
      case 'consumable':
        return GearConsumableSchema.create()
      case 'wealth':
        return GearWealthSchema.create()
      case 'misc':
        return GearMiscSchema.create()
      default:
      return
    }
  }
  addGear() {
    let g = this.createGear(this.state.currentType)
    if (!g) {
      // TODO: report error
      return console.error('no such gear', this.state.currentType)
    }
    this.input.file.queue()
    if (!this.input.file.state.gear) {
      this.input.file.state.gear = []
    }
    this.input.file.state.gear.push(g)
    this.input.file.unqueue()
  }
  deleteGear(index) {
    this.input.file.state.gear = this.input.file.state.gear.filter((_,i)=>i!==index)
  }
}

style {
  .HordEditor {
  }
  .HordEditor__Weapon {
  }
  .HordEditor__Entry {
  }
  .HordEditor__Section {
  }
  .HordEditor__Gear__Controls {
    display: grid;
    grid-template-columns: auto minmax(0, 1fr);
  }
  .HordEditor__Gear {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows: auto minmax(0, 1fr);
  }
  .HordEditor__Gear__Items {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
  }
  .HordEditor__Gear__Items__Item {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    padding: .5em;
    margin: .25em;
    background: var(--listing-bg);
  }
}

section.HordEditor__General
  DotInput errors=state.errors dot=input.dot field=`name` title='name' tooltip='Descriptive name of the gear selection.'
section.HordEditor__Gear
  div.HordEditor__Gear__Controls
    select on-change(e=>component.state.currentType=e.target.value)
      for|gear| of=['weapon', 'armor', 'consumable', 'wealth', 'misc']
        option selected=state.currentType===gear value=gear -- ${gear}
    button on-click('addGear') -- add gear
  div.HordEditor__Gear__Items
    if(input.dot['gear'])
      for|gear, gearIndex| of=input.dot['gear']
        div.HordEditor__Gear__Items__Item
          $ let d = `gear.${gearIndex}`
          Gear on-delete('deleteGear', gearIndex) file=input.file dot=input.dot field=d errors=state.errors config=input.config
