class {
  convertEvent(e) {
    if (this.input.type === 'number') return Number(e.target.value)
    if (this.input.type === 'checkbox') return e.target.checked
    return e.target.value
  }
  handleChange(e) {
    if (e.target.value == '') {
      delete this.input.dot[this.input.field]
    } else {
      this.input.dot[this.input.field] = this.convertEvent(e)
    }
  }
}

macro|{ renderBody, field }| name='ErrorableMacro'
  span.errorable class=input.errors[field]?'-error':''
    <${renderBody}/>
    if(input.errors[field])
      span.errorable__error -- ${input.errors[field]}

label.HordEditor__Input class=`-type-${input.type}`
  span.HordEditor__Input__name -- ${input.title}
  ErrorableMacro field=input.field
    if(input.type==='dropdown')
      select.HordEditor__Entry__input on-change(e=>input.dot[input.field]=e.target.value)
        if(!input.list||input.list.length===0)
          option -- missing list
        else
          for|item| of=input.list
            $ let title = typeof item==='string'?item:item.title
            $ let option = typeof item==='string'?item:item.option
            option selected=input.dot[input.field]===option value=option -- ${title}
    else-if(input.type==='textarea')
      textarea.HordEditor__Input__input on-change('handleChange')
    else
      input.HordEditor__Input__input type=input.type value=input.dot[input.field] placeholder=input.placeholder on-change('handleChange')

style {
  .HordEditor__Input {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
    margin: .1em;
  }
  .HordEditor__Input.-type-number {
    grid-template-columns: minmax(0, 1fr) minmax(auto, 4em);
  }
  .HordEditor__Input input, .HordEditor__Input select, .HordEditor__Input textarea {
    width: 100%;
    height: 100%;
  }
  .errorable {
    display: flex;
    align-items: stretch;
    justify-content: stretch;
    width: 100%;
    height: 100%;
  }
  .errorable > * {
    flex: 1;
  }
}